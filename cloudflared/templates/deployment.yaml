apiVersion: apps/v1
kind: {{ .Values.cloudflared.type | default "DaemonSet" }}
metadata:
  name: cloudflared
  labels:
    {{- include "cloudflared.labels" . | nindent 4 }}
spec:
  {{- if eq (.Values.cloudflared.type | default "DaemonSet") "Deployment" }}
  replicas: {{ .Values.cloudflared.replicaCount | default 1 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "cloudflared.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "cloudflared.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      nodeSelector:
        {{- toYaml .Values.cloudflared.nodeSelector | nindent 8 }}
      tolerations:
        {{- toYaml .Values.cloudflared.tolerations | nindent 8 }}
      containers:
        - name: cloudflared
          image: "{{ .Values.cloudflared.image.repository }}:{{ .Values.cloudflared.image.tag }}"
          imagePullPolicy: {{ .Values.cloudflared.image.pullPolicy }}
          command:
          - cloudflared
          - tunnel
          - --no-autoupdate
          - --metrics
          - 0.0.0.0:2000
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          args:
          - --token
          - {{ .Values.token }}
          resources:
            {{- toYaml .Values.cloudflared.resources | nindent 12 }}
          ports:
            - name: metrics
              containerPort: 2000
          livenessProbe:
            httpGet:
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: config
              mountPath: /etc/cloudflared/config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: cloudflared
            items:
            - key: config.yaml
              path: config.yaml
