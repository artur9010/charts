image:
  repository: ghcr.io/siafoundation/renterd
  pullPolicy: IfNotPresent
  tag: "2.6.0@sha256:a92c829f2e091bc4c4eab8a02966f97cfae326d6631467c2a25cacc6be791ff6"

service:
  bus:
    type: ClusterIP
    port: 9981
  http:
    type: ClusterIP
    port: 9980
  s3:
    type: ClusterIP
    port: 8080

# Sia network name, use mainnet for main network.
# Known test networks: zen, anagami
network: "mainnet"

# You need to create secret with seed and api passwords manually, check README.md for more info.
# If you have any SECURE secret management that can pass secrets to helm, you can set createSecret to true and provide seed and api passwords in values.yaml.
secretName: "renterd"
createSecret: false # Set to true if you want to create secret automatically, but you will need to provide seed and api passwords in values.yaml.
# Also i should remind you that you should never put your seed unencrypted in values.yaml, it is not secure, also DO NOT EVER send those credentials to git.
# If you somehow shared your seed, you should immediately transfer your funds to new wallet.
secretContent:
  RENTERD_SEED: "12 words"
  RENTERD_API_PASSWORD: "secure_api_password"
  RENTERD_BUS_API_PASSWORD: "secure_api_password"
  RENTERD_WORKER_API_PASSWORD: "secure_api_password"

# If you decide to not use mysql, you will need to create a secret manually and provide its name here. Check README.md for more info.
# If you have any SECURE secret management that can pass secrets to helm, you can set createDatabaseSecret to true and provide database credentials in values.yaml.
databaseSecretName: ""
createDatabaseSecret: false # Set to true if you want to create secret automatically, but you will need to provide database credentials in values.yaml.
databaseSecretContent:
  RENTERD_DB_URI: "mysql.example.com:3306"
  RENTERD_DB_USER: "renterd"
  RENTERD_DB_PASSWORD: "hunter2"
  RENTERD_DB_NAME: "renterd"
  RENTERD_DB_METRICS_NAME: "renterd_metrics"

s3:
  enabled: true

storage:
  name: "renterd-bus-data"
  spec:
    accessModes: [ "ReadWriteOnce" ]
    # storageClassName: ""
    resources:
      requests:
        storage: 8Gi

bus:
  # renterd config - bus section
  # gatewayAddr is overridden in configmap, so don't specify it inside config
  config: {}
    # announcementMaxAgeHours: 8736
    # bootstrap: true
    # persistInterval: 1m0s
    # usedUtxoExpiry: 24h0m0s
    # slabBufferCompleionThreshold: 4096
  resources: {}
    # limits:
    #   cpu: 2000m
    #   memory: 8Gi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  nodeSelector: {}
  affinity: {}
  tolerations: {}
  topologySpreadConstraints: {}
  # as renterd does not need to access k8s api, I recommend leaving it off
  automountServiceAccountToken: false
  enableServiceLinks: false
  securityContext: {}
    # runAsUser: 1000
    # runAsGroup: 1000
    # fsGroup: 1000

autopilot:
  enabled: true
  # renterd config - autopilot section
  config: {}
    # accountsRefillInterval: 10s
    # heartbeat: 30m0s
    # migrationHealthCutoff: 0.75
    # revisionBroadcastInterval: 168h0m0s
    # revisionSubmissionBuffer: 144
    # scannerInterval: 24h0m0s
    # scannerBatchSize: 1000
    # scannerNumThreads: 100
    # migratorParallelSlabsPerWorker: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: {}
  topologySpreadConstraints: {}
  # as renterd does not need to access k8s api, I recommend leaving it off
  automountServiceAccountToken: false
  enableServiceLinks: false
  securityContext: {}
    # runAsUser: 1000
    # runAsGroup: 1000
    # fsGroup: 1000

workers:
  # renterd config - worker section
  config: {}
    # busFlushInterval: 5s
    # contractLockTimeout: 30s
    # downloadOverdriveTimeout: 3s
    # uploadOverdriveTimeout: 3s
    # downloadMaxOverdrive: 5
    # downloadMaxMemory: 1073741824
    # uploadMaxMemory: 1073741824
    # uploadMaxOverdrive: 5
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: {}
  topologySpreadConstraints: {}
  # as renterd does not need to access k8s api, I recommend leaving it off
  automountServiceAccountToken: false
  enableServiceLinks: false
  securityContext: {}
    # runAsUser: 1000
    # runAsGroup: 1000
    # fsGroup: 1000

ingresses: []
  # - name: "renterd"
  #   className: "traefik"
  #   annotations: {}
  #   hosts:
  #     - host: renterd.example.com
  #       paths:
  #         - path: /
  #           pathType: ImplementationSpecific
  #           svcName: renterd-bus
  #           svcPort: 9980
  #         - path: /api/worker
  #           pathType: ImplementationSpecific
  #           svcName: renterd-worker
  #           svcPort: 9980
  #         - path: /api/autopilot
  #           pathType: ImplementationSpecific
  #           svcName: renterd-autopilot
  #           svcPort: 9980
  #     - host: s3.example.com
  #       paths:
  #         - path: /
  #           pathType: ImplementationSpecific
  #           svcName: renterd-worker
  #           svcPort: 8080
  #   tls:
  #     - secretName: ingress-tls
  #       hosts:
  #         - renterd.example.com
  #         - s3.example.com
